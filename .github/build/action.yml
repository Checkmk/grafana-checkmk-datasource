name: 'Build'
inputs:
  release:
    description: 'Boolean to specify if this is a release (true), or test build (false)'
    required: true
  signed:
    description: 'Boolean to specify if this build should be signed'
    required: true
outputs:
  plugin_path:
    description: 'path to the plugin archive'
    value: '${{ steps.metadata.outputs.archive }}'
  plugin_checksum_path:
    description: 'checksum of plugin archive'
    value: '${{ steps.metadata.outputs.archive-checksum }}'
runs:
  using: 'composite'
  steps:
    - name: Install dependencies
      shell: bash
      run: |
        npm ci
        sudo apt-get install jq

    - name: Adapt version of plugin to indicate this is not a official release
      shell: bash
      run: |
        VERSION=$(jq -r .version package.json)
        # increase patch version, otherwise grafana plugin validator will fail:
        VERSION=$(echo "$VERSION" | perl -pe 's/^((\d+\.)*)(\d+)(.*)$/$1.($3+1).$4/e')
        VERSION=$VERSION-testbuild.${{ github.run_id }}
        jq ".version |= \"$VERSION\"" ./package.json > ./package.new.json
        mv ./package.new.json ./package.json
      if: ${{ inputs.release == 'false' }}

    - name: Build signed plugin and test frontend
      shell: bash
      run: |
        npm run build
        npm run sign
      if: ${{ inputs.signed == 'true'}}

    - name: Get plugin metadata
      shell: bash
      id: metadata
      run: |

        export GRAFANA_PLUGIN_ID=$(cat dist/plugin.json | jq -r .id)
        export GRAFANA_PLUGIN_VERSION=$(cat dist/plugin.json | jq -r .info.version)
        export GRAFANA_PLUGIN_TYPE=$(cat dist/plugin.json | jq -r .type)
        export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip
        export GRAFANA_PLUGIN_ARTIFACT_CHECKSUM=${GRAFANA_PLUGIN_ARTIFACT}.md5

        echo "plugin-id=${GRAFANA_PLUGIN_ID}"                       >> $GITHUB_OUTPUT
        echo "plugin-version=${GRAFANA_PLUGIN_VERSION}"             >> $GITHUB_OUTPUT
        echo "plugin-type=${GRAFANA_PLUGIN_TYPE}"                   >> $GITHUB_OUTPUT
        echo "archive=${GRAFANA_PLUGIN_ARTIFACT}"                   >> $GITHUB_OUTPUT
        echo "archive-checksum=${GRAFANA_PLUGIN_ARTIFACT_CHECKSUM}" >> $GITHUB_OUTPUT

        echo "github-tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

    - name: Check package version
      shell: bash
      run: |
        if ! echo "v${{ steps.metadata.outputs.plugin-version }}" | grep -q "^${{ steps.metadata.outputs.github-tag }}.*$"; then
          printf "\033[0;31mPlugin version doesn't match tag name\033[0m\n"
          exit 1
        fi
      if: ${{ inputs.release == 'true' }}

    - name: Package plugin
      shell: bash
      id: package-plugin
      run: |
        mv dist ${{ steps.metadata.outputs.plugin-id }}
        zip ${{ steps.metadata.outputs.archive }} ${{ steps.metadata.outputs.plugin-id }} -r
        md5sum ${{ steps.metadata.outputs.archive }} > ${{ steps.metadata.outputs.archive-checksum }}
        echo "checksum=$(cat ./${{ steps.metadata.outputs.archive-checksum }} | cut -d' ' -f1)" >> $GITHUB_OUTPUT

    - name: Upload plugin package
      uses: actions/upload-artifact@v4
      with:
        name: '${{ steps.metadata.outputs.archive }}'
        path: '${{ steps.metadata.outputs.archive }}'

    - name: Upload plugin checksum
      uses: actions/upload-artifact@v4
      with:
        name: '${{ steps.metadata.outputs.archive-checksum }}'
        path: '${{ steps.metadata.outputs.archive-checksum }}'
