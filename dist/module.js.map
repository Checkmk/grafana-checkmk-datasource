{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"lodash\"","webpack:///external amd \"react\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/runtime\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./graphspecs.ts","webpack:///./types.ts","webpack:///./DataSource.ts","webpack:///./ConfigEditor.tsx","webpack:///./components/fields.tsx","webpack:///./components/filters.tsx","webpack:///./components/combinedgraphs.tsx","webpack:///./QueryEditor.tsx","webpack:///./module.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","module.exports = __WEBPACK_EXTERNAL_MODULE__5__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { get } from 'lodash';\nimport { Context, MyQuery } from './types';\nexport const buildRequestBody = (data: any) => `request=${JSON.stringify(data)}`;\n\ntype GraphSpec = [string, any];\n\nexport function graphDefinitionRequest(editionMode: string, query: MyQuery, range: number[]): string {\n  return buildRequestBody({\n    specification: graphSpecification(editionMode, query),\n    data_range: {\n      time_range: range,\n    },\n  });\n}\n\nfunction graphSpecification(editionMode: string, query: MyQuery): GraphSpec {\n  if (editionMode === 'RAW') {\n    return graphTemplateSpecification(query);\n  } else if (editionMode === 'CEE') {\n    return combinedGraphSpecification(query);\n  }\n  throw new Error('UNSUPORTED EDITION');\n}\n\nexport function extractSingleInfos(context: Context) {\n  return {\n    site: get(context, 'siteopt.site', ''),\n    host_name: get(context, 'host.host', ''),\n    service_description: get(context, 'service.service', ''),\n  };\n}\n\nfunction graphTemplateSpecification({ params, context }: MyQuery): GraphSpec {\n  let graph_name = (params.graphMode === 'metric' ? 'METRIC_' : '') + params.graph_name;\n  return [\n    'template',\n    {\n      ...extractSingleInfos(context || {}),\n      graph_id: graph_name,\n    },\n  ];\n}\n\nexport function combinedDesc(context: Context) {\n  return {\n    context: context,\n    datasource: 'services',\n    single_infos: ['host'],\n  };\n}\n\nfunction combinedGraphSpecification({ params, context }: MyQuery): GraphSpec {\n  let graph_name = (params.graphMode === 'metric' ? 'METRIC_' : '') + params.graph_name;\n  return [\n    'combined',\n    { ...combinedDesc(context || {}), graph_template: graph_name, presentation: params.presentation },\n  ];\n}\n","import { DataQuery, DataSourceJsonData } from '@grafana/data';\n\ninterface ContextHTTPVars {\n  [key: string]: string;\n}\nexport interface Context {\n  [key: string]: ContextHTTPVars;\n}\n\nexport interface MyQuery extends DataQuery {\n  params: any;\n  context: Context;\n  data?: any;\n}\n\nexport const defaultQuery: Partial<MyQuery> = {\n  params: {\n    graphMode: 'template',\n    presentation: 'lines',\n  },\n  context: {},\n};\n\n/**\n * These are options configured for each DataSource instance\n */\nexport type Edition = 'CEE' | 'RAW';\nexport interface MyDataSourceOptions extends DataSourceJsonData {\n  url?: string;\n  username?: string;\n  edition?: Edition;\n}\n\n/**\n * Value that is used in the backend, but never sent over HTTP to the frontend\n */\nexport interface MySecureJsonData {\n  secret?: string;\n}\n","import { defaults, get, isEmpty, zip } from 'lodash';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  MutableDataFrame,\n  FieldType,\n} from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\n\nimport { buildRequestBody, combinedDesc, graphDefinitionRequest } from './graphspecs';\nimport { MyQuery, defaultQuery, MyDataSourceOptions } from './types';\n\nexport const buildUrlWithParams = (url: string, params: any) => url + '?' + new URLSearchParams(params).toString();\n\nfunction buildMetricDataFrame(response: any, query: MyQuery) {\n  if (response.data.result_code !== 0) {\n    throw new Error(`${response.data.result}`);\n  }\n  const { start_time, step, curves } = response.data.result;\n\n  const frame = new MutableDataFrame({\n    refId: query.refId,\n    fields: [{ name: 'Time', type: FieldType.time }].concat(\n      curves.map((x: any) => ({ name: x.title, type: FieldType.number }))\n    ),\n  });\n  zip(...curves.map((x: any) => x.rrddata)).forEach((d: any, i: number) =>\n    frame.appendRow([(start_time + i * step) * 1000, ...d])\n  );\n  return frame;\n}\n\nexport class DataSource extends DataSourceApi<MyQuery> {\n  constructor(private instanceSettings: DataSourceInstanceSettings<MyDataSourceOptions>) {\n    super(instanceSettings);\n  }\n\n  async query(options: DataQueryRequest<MyQuery>): Promise<DataQueryResponse> {\n    const { range } = options;\n    const from = range!.from.unix();\n    const to = range!.to.unix();\n    const datasource = this; // defined to be reachable on the next closure\n\n    const promises = options.targets.map((target) => {\n      const query = defaults(target, defaultQuery);\n      return datasource.getGraphQuery([from, to], query);\n    });\n    return Promise.all(promises).then((data) => ({ data }));\n  }\n\n  async getGraphQuery(range: number[], query: MyQuery) {\n    if (isEmpty(query.context) || !query.params.graph_name) {\n      return new MutableDataFrame();\n    }\n    const editionMode = get(this, 'instanceSettings.jsonData.edition', 'CEE');\n    const response = await this.doRequest({\n      ...query,\n      params: { action: 'get_graph' },\n      data: graphDefinitionRequest(editionMode, query, range),\n    });\n    return buildMetricDataFrame(response, query);\n  }\n\n  async testDatasource() {\n    return this.doRequest({\n      refId: 'testDatasource',\n      params: { action: 'get_combined_graph_identifications' },\n      data: buildRequestBody(combinedDesc({ host: { host: 'ARANDOMNAME' } })),\n      context: {},\n    })\n      .catch((error) => {\n        let firstLineOfError = error.message.split('\\n')[0];\n        if (firstLineOfError === 'Checkmk exception: Currently not supported with this Checkmk Edition') {\n          if ((this.instanceSettings.jsonData.edition ?? 'CEE') === 'CEE') {\n            // edition dropdown = cee, so seeing this error means that we speak with a raw edition\n            throw new Error('Mismatch between selected Checkmk edition and monitoring site edition');\n          } else {\n            // edition dropdown = raw, so seeing this error is expected (but auth worked, so we are fine)\n            return;\n          }\n        }\n        throw error;\n      })\n      .then((response) => {\n        return {\n          status: 'success',\n          message: 'Data source is working',\n          title: 'Success',\n        };\n      });\n  }\n\n  async doRequest(options: MyQuery) {\n    return this.cmkRequest({\n      method: options.data == null ? 'GET' : 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      url: buildUrlWithParams(`${this.instanceSettings.url}/cmk/check_mk/webapi.py`, options.params),\n      data: options.data,\n    });\n  }\n\n  async restRequest(api_url: string, data: any) {\n    return this.cmkRequest({\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      url: `${this.instanceSettings.url}/cmk/check_mk/${api_url}`,\n      data: buildRequestBody(data),\n    });\n  }\n\n  async cmkRequest(request: any) {\n    const result = await getBackendSrv()\n      .datasourceRequest(request)\n      .catch(({ cancelled }) => {\n        if (cancelled) {\n          throw new Error(\n            `API request was cancelled. This has either happened because no 'Access-Control-Allow-Origin' header is present, or because of a ssl protocol error. Make sure you are running at least Checkmk version 2.0.`\n          );\n        } else {\n          throw new Error('Could not read API response, make sure the URL you provided is correct.');\n        }\n      });\n\n    if (typeof result.data === 'string') {\n      throw new Error(`${result.data}`);\n    } else if (result.data.result_code !== 0) {\n      throw new Error(`${result.data.result}`);\n    } else {\n      return result;\n    }\n  }\n}\n","import React, { ChangeEvent, PureComponent } from 'react';\nimport { LegacyForms, FieldSet, InlineField, Select } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps, SelectableValue } from '@grafana/data';\nimport { MyDataSourceOptions, MySecureJsonData, Edition } from './types';\n\nconst { SecretFormField, FormField } = LegacyForms;\n\ninterface Props extends DataSourcePluginOptionsEditorProps<MyDataSourceOptions, MySecureJsonData> {}\n\ninterface State {}\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  onUrlChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      url: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  onEditionChange = ({ value }: SelectableValue<Edition>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      edition: value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  onUsernameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      username: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  // Secure field (only sent to the backend)\n  onSecretChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    onOptionsChange({\n      ...options,\n      secureJsonData: {\n        secret: event.target.value,\n      },\n    });\n  };\n\n  onResetSecret = () => {\n    const { onOptionsChange, options } = this.props;\n    onOptionsChange({\n      ...options,\n      secureJsonFields: {\n        ...options.secureJsonFields,\n        secret: false,\n      },\n      secureJsonData: {\n        ...options.secureJsonData,\n        secret: '',\n      },\n    });\n  };\n\n  render() {\n    const { options } = this.props;\n    const { jsonData, secureJsonFields } = options;\n    const secureJsonData = options.secureJsonData || {};\n    interface EditionOption {\n      value: Edition;\n      label: string;\n    }\n\n    const cmkEditions: EditionOption[] = [\n      { value: 'CEE', label: 'Enterprise Editions' },\n      { value: 'RAW', label: 'RAW Edition' },\n    ];\n    if (!jsonData.edition) {\n      this.onEditionChange(cmkEditions[0]);\n    }\n\n    return (\n      <>\n        <FieldSet label=\"Monitoring Site\">\n          <div className=\"gf-form\">\n            <FormField\n              label=\"URL\"\n              labelWidth={6}\n              inputWidth={20}\n              onChange={this.onUrlChange}\n              value={jsonData.url || ''}\n              tooltip=\"Which Checkmk Server to connect to. (Example: https://checkmk.server/site)\"\n            />\n          </div>\n          <InlineField label=\"Edition\" labelWidth={12}>\n            <Select\n              width={32}\n              options={cmkEditions}\n              onChange={this.onEditionChange}\n              value={jsonData.edition}\n              placeholder=\"Select your checkmk edition\"\n            />\n          </InlineField>\n        </FieldSet>\n        <FieldSet label=\"Authentication\">\n          <div className=\"gf-form\">\n            <FormField\n              label=\"Username\"\n              labelWidth={6}\n              inputWidth={20}\n              onChange={this.onUsernameChange}\n              value={jsonData.username || ''}\n              tooltip=\"A checkmk monitoring user. Don't use 'automation' user, because it has admin rights.\"\n            />\n          </div>\n          <div className=\"gf-form\">\n            <SecretFormField\n              isConfigured={(secureJsonFields && secureJsonFields.secret) as boolean}\n              value={secureJsonData.secret || ''}\n              label=\"Secret\"\n              placeholder=\"\"\n              labelWidth={6}\n              inputWidth={20}\n              onReset={this.onResetSecret}\n              onChange={this.onSecretChange}\n              tooltip=\"You can find the secret for your user in your checkmk server under Users.\"\n            />\n          </div>\n        </FieldSet>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport { AsyncSelect, InlineField, Select } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { AutoCompleteEditorProps, EditorProps } from './types';\nimport { get, update as _update, cloneDeep } from 'lodash';\nimport { DataSource } from '../DataSource';\nimport { combinedDesc } from 'graphspecs';\n\nconst update = (x: any, path: string, func: any) => {\n  let copy = cloneDeep(x);\n  _update(copy, path, func);\n  return copy;\n};\n\nexport const vsAutocomplete = (datasource: DataSource, autocompleteConfig: any) => (inputValue: string) =>\n  datasource\n    .restRequest('ajax_vs_autocomplete.py', {\n      ...autocompleteConfig,\n      value: inputValue.trim(),\n    })\n    .then((result) =>\n      result.data.result.choices.map(([value, label]: [string, string]) => ({\n        value,\n        label,\n        isDisabled: value === null,\n      }))\n    );\n\nexport const AsyncAutocomplete = ({\n  autocompleter,\n  onChange,\n  onRunQuery,\n  query,\n  contextPath,\n}: AutoCompleteEditorProps) => {\n  const onSelection = (value: SelectableValue<string>) => {\n    let newQuery = update(query, contextPath, () => value.value);\n    newQuery = update(newQuery, 'params.selections.' + contextPath, () => value);\n    onChange(newQuery);\n    onRunQuery();\n  };\n\n  let contextKey = JSON.stringify(query.context);\n\n  // This is only to mark refresh on graph type selection as they are independent from context\n  if (contextPath === 'params.graph_name') {\n    contextKey += get(query, 'params.graphMode');\n  }\n\n  return (\n    <AsyncSelect\n      onChange={onSelection}\n      loadOptions={autocompleter}\n      defaultOptions\n      key={contextKey}\n      value={get(query, 'params.selections.' + contextPath, {})}\n      width={32}\n    />\n  );\n};\n\nexport const titleCase = (str: string) => str[0].toUpperCase() + str.slice(1).toLowerCase();\n\nexport const GraphType = ({ query, onChange, onRunQuery, contextPath }: AutoCompleteEditorProps) => {\n  const graphTypes = [\n    { value: 'template', label: 'Template' },\n    { value: 'metric', label: 'Single metric' },\n  ];\n  const onGraphTypeChange = (value: SelectableValue<string>) => {\n    onChange(update(query, contextPath, () => value.value));\n    onRunQuery();\n  };\n\n  return (\n    <InlineField label=\"Graph type\" labelWidth={14}>\n      <Select\n        width={32}\n        options={graphTypes}\n        onChange={onGraphTypeChange}\n        value={get(query, contextPath, 'template')}\n      />\n    </InlineField>\n  );\n};\n\nexport const GraphSelect = (props: EditorProps) => {\n  const graphMode = get(props, 'query.params.graphMode', 'template');\n  let completionVS = {};\n  if (props.edition === 'CEE') {\n    completionVS = {\n      ident: 'combined_graphs',\n      params: {\n        ...combinedDesc(props.query.context),\n        presentation: props.query.params.presentation,\n        mode: graphMode,\n      },\n    };\n  } else if (props.edition === 'RAW') {\n    completionVS = {\n      ident: props.query.params.graphMode === 'metric' ? 'monitored_metrics' : 'available_graphs',\n      params: {\n        strict: 'withSource',\n        // 2.1.0 changed this parameter to:\n        // strict: true,\n        // show_independent_of_context: false,\n        // but the defaults for missing values seem to be in our favour.\n        context: get(props, 'query.context', {}),\n      },\n    };\n  }\n\n  const label = titleCase(graphMode);\n  const autocompleter = vsAutocomplete(props.datasource, completionVS);\n\n  const autocompleter_wrap = (inputValue: string) =>\n    autocompleter(inputValue).then((choices) => {\n      if (graphMode === 'template') {\n        return choices.filter(({ value }: SelectableValue<string>) => value && !value.startsWith('METRIC_'));\n      } else {\n        return choices;\n      }\n    });\n\n  return (\n    <>\n      <GraphType contextPath=\"params.graphMode\" {...props} autocompleter={(_) => new Promise(() => ({}))} />\n      <InlineField labelWidth={14} label={label}>\n        <AsyncAutocomplete autocompleter={autocompleter_wrap} contextPath={'params.graph_name'} {...props} />\n      </InlineField>\n    </>\n  );\n};\n","import React, { ChangeEvent } from 'react';\nimport {\n  HorizontalGroup,\n  VerticalGroup,\n  Label,\n  InlineField,\n  Input,\n  AsyncMultiSelect,\n  Checkbox,\n  InlineFieldRow,\n  Select,\n} from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { EditorProps } from './types';\nimport { AsyncAutocomplete, vsAutocomplete } from './fields';\nimport { get, update } from 'lodash';\n\nexport const SiteFilter = (props: EditorProps) => {\n  const sitesVS = { ident: 'sites', params: { strict: false, context: props.query.context } };\n\n  return (\n    <InlineField labelWidth={14} label=\"Site\">\n      <AsyncAutocomplete\n        autocompleter={vsAutocomplete(props.datasource, sitesVS)}\n        contextPath=\"context.siteopt.site\"\n        {...props}\n      />\n    </InlineField>\n  );\n};\n\nexport const HostFilter = (props: EditorProps) => {\n  const hostVS = {\n    ident: 'monitored_hostname',\n    params: { strict: true, context: props.query.context },\n  };\n  return (\n    <InlineField labelWidth={14} label=\"Hostname\">\n      <AsyncAutocomplete\n        autocompleter={vsAutocomplete(props.datasource, hostVS)}\n        contextPath=\"context.host.host\"\n        {...props}\n      />\n    </InlineField>\n  );\n};\n\nexport const HostRegExFilter = (props: EditorProps) => {\n  const onHostChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query } = props;\n    update(query, 'context.hostregex.host_regex', () => event.target.value);\n    onChange(query);\n  };\n\n  const onNegateChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query } = props;\n    update(query, 'context.hostregex.neg_host_regex', () => (event.target.checked ? 'on' : ''));\n    onChange(query);\n  };\n\n  const hostRegEx = get(props, 'query.context.hostregex', {});\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Hostname regex\" labelWidth={14}>\n        <Input width={32} type=\"text\" value={hostRegEx.host_regex || ''} onChange={onHostChange} placeholder=\"none\" />\n      </InlineField>\n      <Checkbox label=\"negate\" onChange={onNegateChange} />\n    </InlineFieldRow>\n  );\n};\n\nexport const ServiceFilter = (props: EditorProps) => {\n  const serviceVS = {\n    ident: 'monitored_service_description',\n    params: { strict: true, host: get(props, 'query.context.host.host', ''), context: props.query.context },\n  };\n\n  return (\n    <InlineField labelWidth={14} label=\"Service\">\n      <AsyncAutocomplete\n        autocompleter={vsAutocomplete(props.datasource, serviceVS)}\n        contextPath=\"context.service.service\"\n        {...props}\n      />\n    </InlineField>\n  );\n};\n\nexport const ServiceRegExFilter = (props: EditorProps) => {\n  const onServiceChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query } = props;\n    update(query, 'context.serviceregex.service_regex', () => event.target.value);\n    onChange(query);\n  };\n\n  const onNegateChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query } = props;\n    update(query, 'context.serviceregex.neg_service_regex', () => (event.target.checked ? 'on' : ''));\n    onChange(query);\n  };\n\n  const serviceRegEx = get(props, 'query.context.serviceregex.service_regex', '');\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Service regex\" labelWidth={14}>\n        <Input width={32} type=\"text\" value={serviceRegEx} onChange={onServiceChange} placeholder=\"none\" />\n      </InlineField>\n      <Checkbox label=\"negate\" onChange={onNegateChange} />\n    </InlineFieldRow>\n  );\n};\n\nexport const HostLabelsFilter = ({ datasource, onChange, query, onRunQuery }: EditorProps) => {\n  const valueListToSelect = (labels: Array<SelectableValue<string>>) =>\n    labels.map(({ value }) => ({ label: value, value: value }));\n\n  const getHostLabels = (inputValue: string) => {\n    const search = inputValue.trim().toLowerCase();\n    return datasource\n      .restRequest('ajax_autocomplete_labels.py', {\n        world: 'core',\n        search_label: search,\n      })\n      .then((result) =>\n        result.data.result.filter(({ value }: { value: string }) => value.toLowerCase().includes(search))\n      )\n      .then(valueListToSelect);\n  };\n\n  const onLabelsChange = (values: any[]) => {\n    update(query, 'context.host_labels.host_label', () => JSON.stringify(values.map((l) => ({ value: l.value }))));\n    onChange(query);\n    onRunQuery();\n  };\n\n  const hostLabelFilter = get(query, 'context.host_labels.host_label', '[]');\n  const labels = valueListToSelect(JSON.parse(hostLabelFilter));\n  return (\n    <InlineField label=\"Host labels\" labelWidth={14}>\n      <AsyncMultiSelect\n        width={32}\n        defaultOptions\n        loadOptions={getHostLabels}\n        onChange={onLabelsChange}\n        value={labels}\n        placeholder=\"Type to trigger search\"\n      />\n    </InlineField>\n  );\n};\n\nexport const HostGroupFilter = (props: EditorProps) => {\n  const onNegateChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query } = props;\n    update(query, 'context.opthostgroup.neg_opthost_group', () => (event.target.checked ? 'on' : ''));\n    onChange(query);\n  };\n\n  const groupVS = {\n    ident: 'allgroups',\n    params: {\n      group_type: 'host',\n      strict: true,\n      host: get(props, 'query.context.opthostgroup.opthost_group', ''),\n      context: props.query.context,\n    },\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Host is in Group\" labelWidth={14}>\n        <AsyncAutocomplete\n          autocompleter={vsAutocomplete(props.datasource, groupVS)}\n          contextPath=\"context.opthostgroup.opthost_group\"\n          {...props}\n        />\n      </InlineField>\n      <Checkbox label=\"negate\" onChange={onNegateChange} />\n    </InlineFieldRow>\n  );\n};\n\nexport const ServiceGroupFilter = (props: EditorProps) => {\n  const onNegateChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query } = props;\n    update(query, 'context.optservicegroup.neg_optservice_group', () => (event.target.checked ? 'on' : ''));\n    onChange(query);\n  };\n\n  const groupVS = {\n    ident: 'allgroups',\n    params: {\n      group_type: 'service',\n      strict: true,\n      service: get(props, 'query.context.optservicegroup.optservice_group', ''),\n      context: props.query.context,\n    },\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Service is in Group\" labelWidth={14}>\n        <AsyncAutocomplete\n          autocompleter={vsAutocomplete(props.datasource, groupVS)}\n          contextPath=\"context.optservicegroup.optservice_group\"\n          {...props}\n        />\n      </InlineField>\n      <Checkbox label=\"negate\" onChange={onNegateChange} />\n    </InlineFieldRow>\n  );\n};\n\ninterface HostTagsEditorProps extends EditorProps {\n  index: number;\n}\n\nexport const HostTagsItemFilter = (props: HostTagsEditorProps) => {\n  const index = props.index;\n\n  const groupVS = {\n    ident: 'tag_groups',\n    params: {\n      context: props.query.context,\n    },\n  };\n  const optionVS = {\n    ident: 'tag_groups_opt',\n    params: {\n      group_id: get(props, `query.context.host_tags.host_tag_${index}_grp`, ''),\n      context: props.query.context,\n    },\n  };\n  const tag_operators = [\n    { value: 'is', label: 'is' },\n    { value: 'isnot', label: 'is not' },\n  ];\n  const onOperatorChange = (value: SelectableValue<string>) => {\n    update(props.query, `context.host_tags.host_tag_${index}_op`, () => value.value);\n    props.onChange(props.query);\n    props.onRunQuery();\n  };\n\n  return (\n    <>\n      <VerticalGroup spacing=\"sm\">\n        <HorizontalGroup>\n          <Label>Host tag {index + 1}: </Label>\n          <AsyncAutocomplete\n            autocompleter={vsAutocomplete(props.datasource, groupVS)}\n            contextPath={`context.host_tags.host_tag_${index}_grp`}\n            {...props}\n          />\n          <Select\n            width={8}\n            options={tag_operators}\n            onChange={onOperatorChange}\n            value={get(props.query, `context.host_tags.host_tag_${index}_op`)}\n          />\n\n          <AsyncAutocomplete\n            autocompleter={vsAutocomplete(props.datasource, optionVS)}\n            contextPath={`context.host_tags.host_tag_${index}_val`}\n            {...props}\n          />\n        </HorizontalGroup>\n      </VerticalGroup>\n    </>\n  );\n};\n\nexport const HostTagsFilter = (props: EditorProps) => {\n  return (\n    <>\n      {Array.from({ length: 3 }).map((_, idx) => (\n        <HostTagsItemFilter key={idx} index={idx} {...props} />\n      ))}\n    </>\n  );\n};\n","import React from 'react';\nimport { Button, InlineField, InlineFieldRow, Select } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { EditorProps } from './types';\nimport {\n  HostFilter,\n  HostGroupFilter,\n  HostLabelsFilter,\n  HostRegExFilter,\n  ServiceFilter,\n  ServiceGroupFilter,\n  ServiceRegExFilter,\n  SiteFilter,\n  HostTagsFilter,\n} from './filters';\n\nexport const SelectAggregation = (props: EditorProps) => {\n  const combined_presentations = [\n    { value: 'lines', label: 'Lines' },\n    // { value: 'stacked', label: 'Stacked' }, // no difference to line at request level\n    { value: 'sum', label: 'Sum' },\n    { value: 'average', label: 'Average' },\n    { value: 'min', label: 'Minimum' },\n    { value: 'max', label: 'Maximum' },\n  ];\n\n  const onPresentationChange = async ({ value }: SelectableValue<string>) => {\n    const { onChange, query, onRunQuery } = props;\n    onChange({ ...query, params: { ...query.params, presentation: value } });\n    onRunQuery();\n  };\n\n  return (\n    <InlineField label=\"Aggregation\" labelWidth={14}>\n      <Select\n        width={32}\n        options={combined_presentations}\n        onChange={onPresentationChange}\n        value={props.query.params.presentation}\n        placeholder=\"Aggregation\"\n      />\n    </InlineField>\n  );\n};\n\nexport const FilterEditor = (props: EditorProps) => {\n  const context = props.query.context || {};\n  return (\n    <>\n      {Object.keys(context).map((filtername, index) => (\n        <SelectFilters key={`${index}/${filtername}`} {...props} filtername={filtername} />\n      ))}\n      <SelectFilters {...props} filtername={''} />\n    </>\n  );\n};\n\ninterface FilterEditorProps extends EditorProps {\n  filtername: string;\n}\n\nexport const SelectFilters = (props: FilterEditorProps) => {\n  const all_filters = [\n    { value: 'siteopt', label: 'Site', render: SiteFilter },\n    { value: 'host', label: 'Hostname', render: HostFilter },\n    { value: 'hostregex', label: 'Hostname regex', render: HostRegExFilter },\n    { value: 'service', label: 'Service', render: ServiceFilter },\n    { value: 'serviceregex', label: 'Service regex', render: ServiceRegExFilter },\n    { value: 'host_labels', label: 'Host Labels', render: HostLabelsFilter },\n    { value: 'opthostgroup', label: 'Host is in Group', render: HostGroupFilter },\n    { value: 'optservicegroup', label: 'Service is in Group', render: ServiceGroupFilter },\n    { value: 'host_tags', label: 'HostTags', render: HostTagsFilter },\n  ];\n  const context = props.query.context || {};\n  const available_filters = all_filters.filter(\n    ({ value }) => value === props.filtername || !context.hasOwnProperty(value)\n  );\n  // Early return in case all filters are on\n  if (!available_filters.length) {\n    return null;\n  }\n\n  const action = () => {\n    const { onChange, query, filtername } = props;\n    if (query.context) {\n      delete query.context[filtername];\n    }\n    onChange(query);\n  };\n\n  const onFilterChange = ({ value }: SelectableValue<string | null>) => {\n    const { onChange, query, filtername } = props;\n    if (query.context) {\n      delete query.context[filtername];\n    }\n\n    if (value) {\n      onChange({ ...query, context: { ...query.context, [value]: {} } });\n    }\n  };\n\n  const activeFilter = all_filters.find(({ value }) => value === props.filtername);\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Filter\" labelWidth={8}>\n        <Select\n          width={32}\n          options={available_filters}\n          onChange={onFilterChange}\n          value={props.filtername || null}\n          placeholder=\"Filter\"\n        />\n      </InlineField>\n      {activeFilter && (\n        <>\n          <Button icon=\"minus\" variant=\"secondary\" onClick={action} />\n          <activeFilter.render {...props} />\n        </>\n      )}\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\nimport { QueryEditorProps } from '@grafana/data';\nimport { DataSource } from './DataSource';\nimport { defaultQuery, MyDataSourceOptions, MyQuery } from './types';\nimport { FilterEditor, SelectAggregation } from './components/combinedgraphs';\nimport { defaults, get } from 'lodash';\nimport { InlineFieldRow } from '@grafana/ui';\nimport { HostFilter, ServiceFilter, SiteFilter } from 'components/filters';\nimport { GraphSelect } from 'components/fields';\n//import { logError } from '@grafana/runtime';\n\ntype Props = QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>;\n\nexport const QueryEditor = (props: Props) => {\n  defaults(props.query, defaultQuery); // mutate into default query\n  const editionMode = get(props, 'datasource.instanceSettings.jsonData.edition', '');\n\n  return (\n    <div className=\"gf-form-group\">\n      {editionMode === 'RAW' && (\n        <InlineFieldRow>\n          <SiteFilter {...props} />\n          <HostFilter {...props} />\n          <ServiceFilter {...props} />\n          <GraphSelect edition={editionMode} {...props} />\n        </InlineFieldRow>\n      )}\n      {editionMode === 'CEE' && (\n        <>\n          <FilterEditor {...props} />\n          <SelectAggregation {...props} />\n          <GraphSelect edition={editionMode} {...props} />\n        </>\n      )}\n    </div>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { DataSource } from './DataSource';\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor';\nimport { MyQuery, MyDataSourceOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<DataSource, MyQuery, MyDataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__5__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","buildRequestBody","data","JSON","stringify","graphDefinitionRequest","editionMode","query","range","specification","graphSpecification","data_range","time_range","params","context","graph_name","graphMode","extractSingleInfos","graph_id","combinedDesc","graph_template","presentation","combinedGraphSpecification","Error","site","host_name","service_description","datasource","single_infos","defaultQuery","buildMetricDataFrame","response","result_code","result","start_time","step","curves","frame","MutableDataFrame","refId","fields","name","type","FieldType","concat","map","x","title","zip","rrddata","forEach","i","appendRow","DataSource","instanceSettings","options","from","unix","to","this","promises","targets","target","defaults","getGraphQuery","Promise","all","then","isEmpty","doRequest","action","host","error","message","split","jsonData","edition","status","cmkRequest","method","headers","url","URLSearchParams","toString","api_url","request","getBackendSrv","datasourceRequest","cancelled","DataSourceApi","SecretFormField","LegacyForms","FormField","ConfigEditor","event","props","onOptionsChange","username","secureJsonData","secret","secureJsonFields","cmkEditions","label","onEditionChange","FieldSet","className","labelWidth","inputWidth","onChange","onUrlChange","tooltip","InlineField","Select","width","placeholder","onUsernameChange","isConfigured","onReset","onResetSecret","onSecretChange","PureComponent","update","path","func","copy","cloneDeep","_update","vsAutocomplete","autocompleteConfig","inputValue","restRequest","trim","choices","isDisabled","AsyncAutocomplete","autocompleter","onRunQuery","contextPath","contextKey","AsyncSelect","newQuery","loadOptions","defaultOptions","GraphType","GraphSelect","completionVS","ident","mode","strict","str","toUpperCase","slice","toLowerCase","_","filter","startsWith","SiteFilter","sitesVS","HostFilter","hostVS","HostRegExFilter","hostRegEx","InlineFieldRow","Input","host_regex","Checkbox","checked","ServiceFilter","serviceVS","ServiceRegExFilter","serviceRegEx","HostLabelsFilter","valueListToSelect","labels","hostLabelFilter","parse","AsyncMultiSelect","search","world","search_label","includes","values","l","HostGroupFilter","groupVS","group_type","ServiceGroupFilter","service","HostTagsItemFilter","index","optionVS","group_id","VerticalGroup","spacing","HorizontalGroup","Label","HostTagsFilter","Array","length","idx","SelectAggregation","onPresentationChange","FilterEditor","keys","filtername","SelectFilters","all_filters","render","available_filters","activeFilter","find","Button","icon","variant","onClick","plugin","DataSourcePlugin","setConfigEditor","setQueryEditor"],"sourceRoot":""}