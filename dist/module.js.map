{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"lodash\"","webpack:///external amd \"react\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/runtime\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./graphspecs.ts","webpack:///./types.ts","webpack:///./DataSource.ts","webpack:///./ConfigEditor.tsx","webpack:///./components/fields.tsx","webpack:///./components/filters.tsx","webpack:///./components/combinedgraphs.tsx","webpack:///./QueryEditor.tsx","webpack:///./module.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","module.exports = __WEBPACK_EXTERNAL_MODULE__5__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { get } from 'lodash';\nimport { ContextHTTPVars, Context, MyQuery, Presentation } from './types';\nexport const buildRequestBody = (data: unknown): string => `request=${JSON.stringify(data)}`;\n\ninterface CombinedGraphSpec {\n  graph_template: string;\n  presentation: Presentation;\n  context: Context;\n  datasource: string;\n  single_infos: string[];\n}\n\ninterface TemplateGraphSpec {\n  graph_id: string;\n}\n\ninterface SingleInfos {\n  site: string | ContextHTTPVars;\n  host_name: string | ContextHTTPVars;\n  service_description: string | ContextHTTPVars;\n}\n\ntype GraphSpec = ['template', TemplateGraphSpec] | ['combined', CombinedGraphSpec];\n\nexport function graphDefinitionRequest(editionMode: string, query: MyQuery, range: number[]): string {\n  return buildRequestBody({\n    specification: graphSpecification(editionMode, query),\n    data_range: {\n      time_range: range,\n    },\n  });\n}\n\nfunction graphSpecification(editionMode: string, query: MyQuery): GraphSpec {\n  if (editionMode === 'RAW') {\n    return graphTemplateSpecification(query);\n  } else if (editionMode === 'CEE') {\n    return combinedGraphSpecification(query);\n  }\n  throw new Error('UNSUPORTED EDITION');\n}\n\nexport function extractSingleInfos(context: Context): SingleInfos {\n  return {\n    site: get(context, 'siteopt.site', ''),\n    host_name: get(context, 'host.host', ''),\n    service_description: get(context, 'service.service', ''),\n  };\n}\n\nfunction graphTemplateSpecification({ params, context }: MyQuery): GraphSpec {\n  const graph_name = (params.graphMode === 'metric' ? 'METRIC_' : '') + params.graph_name;\n  return [\n    'template',\n    {\n      ...extractSingleInfos(context || {}),\n      graph_id: graph_name,\n    },\n  ];\n}\n\nexport function combinedDesc(context: Context): Omit<CombinedGraphSpec, 'graph_template' | 'presentation'> {\n  return {\n    context: context,\n    datasource: 'services',\n    single_infos: ['host'],\n  };\n}\n\nfunction combinedGraphSpecification({ params, context }: MyQuery): GraphSpec {\n  const graph_name = (params.graphMode === 'metric' ? 'METRIC_' : '') + params.graph_name;\n  if (params.presentation == null) {\n    throw new Error('params.presentation has to be not null');\n  }\n  return [\n    'combined',\n    { ...combinedDesc(context || {}), graph_template: graph_name, presentation: params.presentation },\n  ];\n}\n","import { DataQuery, DataSourceJsonData } from '@grafana/data';\n\nexport type ContextHTTPVars = Record<string, string>;\n\nexport type Context = Record<string, ContextHTTPVars>;\n\nexport type Presentation = 'lines' | 'sum' | 'average' | 'min' | 'max';\n\nexport interface QueryParams {\n  graphMode?: 'metric' | 'template';\n  presentation?: Presentation;\n  graph_name?: string;\n  action?: 'get_graph' | 'get_combined_graph_identifications';\n}\n\nexport interface MyQuery extends DataQuery {\n  params: QueryParams;\n  context: Context;\n  data?: string;\n}\n\nexport const defaultQuery: Partial<MyQuery> = {\n  params: {\n    graphMode: 'template',\n    presentation: 'lines',\n  },\n  context: {},\n};\n\n/**\n * These are options configured for each DataSource instance\n */\nexport type Edition = 'CEE' | 'RAW';\nexport interface MyDataSourceOptions extends DataSourceJsonData {\n  url?: string;\n  username?: string;\n  edition?: Edition;\n}\n\n/**\n * Value that is used in the backend, but never sent over HTTP to the frontend\n */\nexport interface MySecureJsonData {\n  secret?: string;\n}\n\nexport interface ResponseDataAutocomplete {\n  choices: Array<[string, string]>;\n}\n\nexport type ResponseDataAutocompleteLabel = Array<{\n  value: string;\n}>;\n\nexport interface ResponseDataCurves {\n  filter: unknown;\n  start_time: number;\n  step: number;\n  curves: Array<{\n    title: string;\n    rrddata: Array<{\n      i: number;\n      d: Record<string, unknown>;\n    }>;\n  }>;\n}\n\nexport interface ResponseData<T> {\n  result_code: number;\n  result: T;\n}\n","import { defaults, get, isEmpty, zip } from 'lodash';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  MutableDataFrame,\n  FieldType,\n} from '@grafana/data';\nimport { FetchResponse, getBackendSrv, BackendSrvRequest } from '@grafana/runtime';\n\nimport { buildRequestBody, combinedDesc, graphDefinitionRequest } from './graphspecs';\nimport { MyQuery, defaultQuery, MyDataSourceOptions, ResponseData, ResponseDataCurves } from './types';\n\nexport const buildUrlWithParams = (url: string, params: Record<string, string>): string =>\n  url + '?' + new URLSearchParams(params).toString();\n\nfunction buildMetricDataFrame(response: FetchResponse<ResponseData<ResponseDataCurves>>, query: MyQuery) {\n  if (response.data.result_code !== 0) {\n    throw new Error(`${response.data.result}`);\n  }\n  const { start_time, step, curves } = response.data.result;\n\n  const frame = new MutableDataFrame({\n    refId: query.refId,\n    fields: [{ name: 'Time', type: FieldType.time }].concat(\n      curves.map((x) => ({ name: x.title, type: FieldType.number }))\n    ),\n  });\n  zip(...curves.map((x) => x.rrddata)).forEach((d, i) => frame.appendRow([(start_time + i * step) * 1000, ...d]));\n  return frame;\n}\n\nexport class DataSource extends DataSourceApi<MyQuery> {\n  constructor(private instanceSettings: DataSourceInstanceSettings<MyDataSourceOptions>) {\n    super(instanceSettings);\n  }\n\n  async query(options: DataQueryRequest<MyQuery>): Promise<DataQueryResponse> {\n    const { range } = options;\n    const from = range.from.unix();\n    const to = range.to.unix();\n\n    const promises = options.targets.map((target) => {\n      const query = defaults(target, defaultQuery);\n      return this.getGraphQuery([from, to], query);\n    });\n    return Promise.all(promises).then((data) => ({ data }));\n  }\n\n  async getGraphQuery(range: number[], query: MyQuery): Promise<MutableDataFrame<unknown>> {\n    if (isEmpty(query.context) || !query.params.graph_name) {\n      return new MutableDataFrame();\n    }\n    const editionMode = get(this, 'instanceSettings.jsonData.edition', 'CEE');\n    const response = await this.doRequest<ResponseDataCurves>({\n      ...query,\n      params: { action: 'get_graph' },\n      data: graphDefinitionRequest(editionMode, query, range),\n    });\n    return buildMetricDataFrame(response, query);\n  }\n\n  async testDatasource(): Promise<unknown | undefined> {\n    return this.doRequest({\n      refId: 'testDatasource',\n      params: { action: 'get_combined_graph_identifications' },\n      data: buildRequestBody(combinedDesc({ host: { host: 'ARANDOMNAME' } })),\n      context: {},\n    })\n      .catch((error) => {\n        const firstLineOfError = error.message.split('\\n')[0];\n        if (firstLineOfError === 'Checkmk exception: Currently not supported with this Checkmk Edition') {\n          if ((this.instanceSettings.jsonData.edition ?? 'CEE') === 'CEE') {\n            // edition dropdown = cee, so seeing this error means that we speak with a raw edition\n            throw new Error('Mismatch between selected Checkmk edition and monitoring site edition');\n          } else {\n            // edition dropdown = raw, so seeing this error is expected (but auth worked, so we are fine)\n            return;\n          }\n        }\n        throw error;\n      })\n      .then(() => {\n        return {\n          status: 'success',\n          message: 'Data source is working',\n          title: 'Success',\n        };\n      });\n  }\n\n  async doRequest<T>(options: MyQuery): Promise<FetchResponse<ResponseData<T>>> {\n    return this.cmkRequest<T>({\n      method: options.data == null ? 'GET' : 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      url: buildUrlWithParams(`${this.instanceSettings.url}/cmk/check_mk/webapi.py`, { ...options.params }),\n      data: options.data,\n    });\n  }\n\n  async restRequest<T>(api_url: string, data: unknown): Promise<FetchResponse<ResponseData<T>>> {\n    return this.cmkRequest<T>({\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      url: `${this.instanceSettings.url}/cmk/check_mk/${api_url}`,\n      data: buildRequestBody(data),\n    });\n  }\n\n  async cmkRequest<T>(request: BackendSrvRequest): Promise<FetchResponse<ResponseData<T>>> {\n    const result = await getBackendSrv()\n      .fetch<ResponseData<T>>(request)\n      .toPromise()\n      .catch((error) => {\n        if (error.cancelled) {\n          throw new Error(\n            `API request was cancelled. This has either happened because no 'Access-Control-Allow-Origin' header is present, or because of a ssl protocol error. Make sure you are running at least Checkmk version 2.0.`\n          );\n        } else {\n          throw new Error('Could not read API response, make sure the URL you provided is correct.');\n        }\n      });\n\n    if (result === undefined) {\n      throw new Error('Got undefined result');\n    }\n\n    if (result.data instanceof String) {\n      throw new Error(`${result.data}`);\n    } else if (result.data.result_code !== 0) {\n      throw new Error(`${result.data.result}`);\n    } else {\n      return result;\n    }\n  }\n}\n","import React, { ChangeEvent, PureComponent } from 'react';\nimport { LegacyForms, FieldSet, InlineField, Select } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps, SelectableValue } from '@grafana/data';\nimport { MyDataSourceOptions, MySecureJsonData, Edition } from './types';\n\nconst { SecretFormField, FormField } = LegacyForms;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface Props extends DataSourcePluginOptionsEditorProps<MyDataSourceOptions, MySecureJsonData> {}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface State {}\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  onUrlChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      url: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  onEditionChange = ({ value }: SelectableValue<Edition>): void => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      edition: value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  onUsernameChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      username: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  // Secure field (only sent to the backend)\n  onSecretChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    const { onOptionsChange, options } = this.props;\n    onOptionsChange({\n      ...options,\n      secureJsonData: {\n        secret: event.target.value,\n      },\n    });\n  };\n\n  onResetSecret = (): void => {\n    const { onOptionsChange, options } = this.props;\n    onOptionsChange({\n      ...options,\n      secureJsonFields: {\n        ...options.secureJsonFields,\n        secret: false,\n      },\n      secureJsonData: {\n        ...options.secureJsonData,\n        secret: '',\n      },\n    });\n  };\n\n  render(): JSX.Element {\n    const { options } = this.props;\n    const { jsonData, secureJsonFields } = options;\n    const secureJsonData = options.secureJsonData || {};\n    interface EditionOption {\n      value: Edition;\n      label: string;\n    }\n\n    const cmkEditions: EditionOption[] = [\n      { value: 'CEE', label: 'Enterprise Editions' },\n      { value: 'RAW', label: 'RAW Edition' },\n    ];\n    if (!jsonData.edition) {\n      this.onEditionChange(cmkEditions[0]);\n    }\n\n    return (\n      <>\n        <FieldSet label=\"Monitoring Site\">\n          <div className=\"gf-form\">\n            <FormField\n              label=\"URL\"\n              labelWidth={6}\n              inputWidth={20}\n              onChange={this.onUrlChange}\n              value={jsonData.url || ''}\n              tooltip=\"Which Checkmk Server to connect to. (Example: https://checkmk.server/site)\"\n              data-test-id=\"checkmk-url\"\n            />\n          </div>\n          <InlineField label=\"Edition\" labelWidth={12}>\n            <Select\n              width={32}\n              options={cmkEditions}\n              onChange={this.onEditionChange}\n              value={jsonData.edition}\n              placeholder=\"Select your checkmk edition\"\n            />\n          </InlineField>\n        </FieldSet>\n        <FieldSet label=\"Authentication\">\n          <div className=\"gf-form\">\n            <FormField\n              label=\"Username\"\n              labelWidth={6}\n              inputWidth={20}\n              onChange={this.onUsernameChange}\n              value={jsonData.username || ''}\n              tooltip=\"A checkmk monitoring user. Don't use 'automation' user, because it has admin rights.\"\n              data-test-id=\"checkmk-username\"\n            />\n          </div>\n          <div className=\"gf-form\">\n            <SecretFormField\n              isConfigured={(secureJsonFields && secureJsonFields.secret) as boolean}\n              value={secureJsonData.secret || ''}\n              label=\"Secret\"\n              placeholder=\"\"\n              labelWidth={6}\n              inputWidth={20}\n              onReset={this.onResetSecret}\n              onChange={this.onSecretChange}\n              tooltip=\"You can find the secret for your user in your checkmk server under Users.\"\n              data-test-id=\"checkmk-password\"\n            />\n          </div>\n        </FieldSet>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport { AsyncSelect, InlineField, Select } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { AutoCompleteEditorProps, AutoCompleteConfig, EditorProps } from './types';\nimport { get, update as _update, cloneDeep } from 'lodash';\nimport { DataSource } from '../DataSource';\nimport { combinedDesc } from 'graphspecs';\nimport { MyQuery, ResponseDataAutocomplete } from 'types';\n\nconst update = (x: MyQuery, path: string, func: () => SelectableValue<string> | string | undefined) => {\n  const copy = cloneDeep(x);\n  _update(copy, path, func);\n  return copy;\n};\n\nexport const vsAutocomplete =\n  (datasource: DataSource, autocompleteConfig: AutoCompleteConfig) =>\n  (inputValue: string): Promise<Array<{ value: string; label: string; isDisabled: boolean }>> =>\n    datasource\n      .restRequest<ResponseDataAutocomplete>('ajax_vs_autocomplete.py', {\n        ...autocompleteConfig,\n        value: inputValue.trim(),\n      })\n      .then((result) =>\n        result?.data.result.choices.map(([value, label]: [string, string]) => ({\n          value,\n          label,\n          isDisabled: value === null,\n        }))\n      );\n\nexport const AsyncAutocomplete = ({\n  autocompleter,\n  onChange,\n  onRunQuery,\n  query,\n  contextPath,\n}: AutoCompleteEditorProps): JSX.Element => {\n  const onSelection = (value: SelectableValue<string>) => {\n    let newQuery = update(query, contextPath, () => value.value);\n    newQuery = update(newQuery, 'params.selections.' + contextPath, () => value);\n    onChange(newQuery);\n    onRunQuery();\n  };\n\n  let contextKey = JSON.stringify(query.context);\n\n  // This is only to mark refresh on graph type selection as they are independent from context\n  if (contextPath === 'params.graph_name') {\n    contextKey += get(query, 'params.graphMode');\n  }\n\n  return (\n    <AsyncSelect\n      onChange={onSelection}\n      loadOptions={autocompleter}\n      defaultOptions\n      key={contextKey}\n      value={get(query, 'params.selections.' + contextPath, {})}\n      width={32}\n    />\n  );\n};\n\nexport const titleCase = (str: string): string => str[0].toUpperCase() + str.slice(1).toLowerCase();\n\nexport const GraphType = ({ query, onChange, onRunQuery, contextPath }: AutoCompleteEditorProps): JSX.Element => {\n  const graphTypes = [\n    { value: 'template', label: 'Template' },\n    { value: 'metric', label: 'Single metric' },\n  ];\n  const onGraphTypeChange = (value: SelectableValue<string>) => {\n    onChange(update(query, contextPath, () => value.value));\n    onRunQuery();\n  };\n\n  return (\n    <InlineField label=\"Graph type\" labelWidth={14}>\n      <Select\n        width={32}\n        options={graphTypes}\n        onChange={onGraphTypeChange}\n        value={get(query, contextPath, 'template')}\n      />\n    </InlineField>\n  );\n};\n\nexport const GraphSelect = (props: EditorProps): JSX.Element => {\n  const graphMode = get(props, 'query.params.graphMode', 'template');\n  let completionVS;\n  if (props.edition === 'CEE') {\n    completionVS = {\n      ident: 'combined_graphs',\n      params: {\n        ...combinedDesc(props.query.context),\n        presentation: props.query.params.presentation,\n        mode: graphMode,\n      },\n    };\n  } else if (props.edition === 'RAW') {\n    completionVS = {\n      ident: props.query.params.graphMode === 'metric' ? 'monitored_metrics' : 'available_graphs',\n      params: {\n        strict: 'withSource',\n        // 2.1.0 changed this parameter to:\n        // strict: true,\n        // show_independent_of_context: false,\n        // but the defaults for missing values seem to be in our favour.\n        context: get(props, 'query.context', {}),\n      },\n    };\n  } else {\n    throw new Error('props.edition has undefined value'); // should never happen\n  }\n\n  const label = titleCase(graphMode);\n  const autocompleter = vsAutocomplete(props.datasource, completionVS);\n\n  const autocompleter_wrap = (inputValue: string) =>\n    autocompleter(inputValue).then((choices) => {\n      if (graphMode === 'template') {\n        return choices.filter(({ value }: SelectableValue<string>) => value && !value.startsWith('METRIC_'));\n      } else {\n        return choices;\n      }\n    });\n\n  return (\n    <>\n      <GraphType contextPath=\"params.graphMode\" {...props} autocompleter={() => new Promise(() => ({}))} />\n      <InlineField labelWidth={14} label={label}>\n        <AsyncAutocomplete autocompleter={autocompleter_wrap} contextPath={'params.graph_name'} {...props} />\n      </InlineField>\n    </>\n  );\n};\n","import React, { ChangeEvent } from 'react';\nimport {\n  HorizontalGroup,\n  VerticalGroup,\n  Label,\n  InlineField,\n  Input,\n  AsyncMultiSelect,\n  Checkbox,\n  InlineFieldRow,\n  Select,\n} from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { EditorProps } from './types';\nimport { AsyncAutocomplete, vsAutocomplete } from './fields';\nimport { get, update } from 'lodash';\nimport { ResponseDataAutocompleteLabel } from 'types';\n\nexport const SiteFilter = (props: EditorProps): JSX.Element => {\n  const sitesVS = { ident: 'sites', params: { strict: false, context: props.query.context } };\n\n  return (\n    <InlineField labelWidth={14} label=\"Site\">\n      <AsyncAutocomplete\n        autocompleter={vsAutocomplete(props.datasource, sitesVS)}\n        contextPath=\"context.siteopt.site\"\n        {...props}\n      />\n    </InlineField>\n  );\n};\n\nexport const HostFilter = (props: EditorProps): JSX.Element => {\n  const hostVS = {\n    ident: 'monitored_hostname',\n    params: { strict: true, context: props.query.context },\n  };\n  return (\n    <InlineField labelWidth={14} label=\"Hostname\">\n      <AsyncAutocomplete\n        autocompleter={vsAutocomplete(props.datasource, hostVS)}\n        contextPath=\"context.host.host\"\n        {...props}\n      />\n    </InlineField>\n  );\n};\n\nexport const HostRegExFilter = (props: EditorProps): JSX.Element => {\n  const onHostChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query } = props;\n    update(query, 'context.hostregex.host_regex', () => event.target.value);\n    onChange(query);\n  };\n\n  const onNegateChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query } = props;\n    update(query, 'context.hostregex.neg_host_regex', () => (event.target.checked ? 'on' : ''));\n    onChange(query);\n  };\n\n  const hostRegEx = get(props, 'query.context.hostregex', {});\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Hostname regex\" labelWidth={14}>\n        <Input width={32} type=\"text\" value={hostRegEx.host_regex || ''} onChange={onHostChange} placeholder=\"none\" />\n      </InlineField>\n      <Checkbox label=\"negate\" onChange={onNegateChange} />\n    </InlineFieldRow>\n  );\n};\n\nexport const ServiceFilter = (props: EditorProps): JSX.Element => {\n  const serviceVS = {\n    ident: 'monitored_service_description',\n    params: { strict: true, host: get(props, 'query.context.host.host', ''), context: props.query.context },\n  };\n\n  return (\n    <InlineField labelWidth={14} label=\"Service\">\n      <AsyncAutocomplete\n        autocompleter={vsAutocomplete(props.datasource, serviceVS)}\n        contextPath=\"context.service.service\"\n        {...props}\n      />\n    </InlineField>\n  );\n};\n\nexport const ServiceRegExFilter = (props: EditorProps): JSX.Element => {\n  const onServiceChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query } = props;\n    update(query, 'context.serviceregex.service_regex', () => event.target.value);\n    onChange(query);\n  };\n\n  const onNegateChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query } = props;\n    update(query, 'context.serviceregex.neg_service_regex', () => (event.target.checked ? 'on' : ''));\n    onChange(query);\n  };\n\n  const serviceRegEx = get(props, 'query.context.serviceregex.service_regex', '');\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Service regex\" labelWidth={14}>\n        <Input width={32} type=\"text\" value={serviceRegEx} onChange={onServiceChange} placeholder=\"none\" />\n      </InlineField>\n      <Checkbox label=\"negate\" onChange={onNegateChange} />\n    </InlineFieldRow>\n  );\n};\n\nexport const HostLabelsFilter = ({ datasource, onChange, query, onRunQuery }: EditorProps): JSX.Element => {\n  const valueListToSelect = (labels: Array<SelectableValue<string>>) =>\n    labels.map(({ value }) => ({ label: value, value: value }));\n\n  const getHostLabels = (inputValue: string) => {\n    const search = inputValue.trim().toLowerCase();\n    return datasource\n      .restRequest<ResponseDataAutocompleteLabel>('ajax_autocomplete_labels.py', {\n        world: 'core',\n        search_label: search,\n      })\n      .then((result) =>\n        result?.data.result.filter(({ value }: { value: string }) => value.toLowerCase().includes(search))\n      )\n      .then(valueListToSelect);\n  };\n\n  const onLabelsChange = (values: Array<SelectableValue<string>>) => {\n    update(query, 'context.host_labels.host_label', () => JSON.stringify(values.map((l) => ({ value: l.value }))));\n    onChange(query);\n    onRunQuery();\n  };\n\n  const hostLabelFilter = get(query, 'context.host_labels.host_label', '[]');\n  const labels = valueListToSelect(JSON.parse(hostLabelFilter));\n  return (\n    <InlineField label=\"Host labels\" labelWidth={14}>\n      <AsyncMultiSelect\n        width={32}\n        defaultOptions\n        loadOptions={getHostLabels}\n        onChange={onLabelsChange}\n        value={labels}\n        placeholder=\"Type to trigger search\"\n      />\n    </InlineField>\n  );\n};\n\nexport const HostGroupFilter = (props: EditorProps): JSX.Element => {\n  const onNegateChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query } = props;\n    update(query, 'context.opthostgroup.neg_opthost_group', () => (event.target.checked ? 'on' : ''));\n    onChange(query);\n  };\n\n  const groupVS = {\n    ident: 'allgroups',\n    params: {\n      group_type: 'host',\n      strict: true,\n      host: get(props, 'query.context.opthostgroup.opthost_group', ''),\n      context: props.query.context,\n    },\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Host is in Group\" labelWidth={14}>\n        <AsyncAutocomplete\n          autocompleter={vsAutocomplete(props.datasource, groupVS)}\n          contextPath=\"context.opthostgroup.opthost_group\"\n          {...props}\n        />\n      </InlineField>\n      <Checkbox label=\"negate\" onChange={onNegateChange} />\n    </InlineFieldRow>\n  );\n};\n\nexport const ServiceGroupFilter = (props: EditorProps): JSX.Element => {\n  const onNegateChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query } = props;\n    update(query, 'context.optservicegroup.neg_optservice_group', () => (event.target.checked ? 'on' : ''));\n    onChange(query);\n  };\n\n  const groupVS = {\n    ident: 'allgroups',\n    params: {\n      group_type: 'service',\n      strict: true,\n      service: get(props, 'query.context.optservicegroup.optservice_group', ''),\n      context: props.query.context,\n    },\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Service is in Group\" labelWidth={14}>\n        <AsyncAutocomplete\n          autocompleter={vsAutocomplete(props.datasource, groupVS)}\n          contextPath=\"context.optservicegroup.optservice_group\"\n          {...props}\n        />\n      </InlineField>\n      <Checkbox label=\"negate\" onChange={onNegateChange} />\n    </InlineFieldRow>\n  );\n};\n\ninterface HostTagsEditorProps extends EditorProps {\n  index: number;\n}\n\nexport const HostTagsItemFilter = (props: HostTagsEditorProps): JSX.Element => {\n  const index = props.index;\n\n  const groupVS = {\n    ident: 'tag_groups',\n    params: {\n      context: props.query.context,\n    },\n  };\n  const optionVS = {\n    ident: 'tag_groups_opt',\n    params: {\n      group_id: get(props, `query.context.host_tags.host_tag_${index}_grp`, ''),\n      context: props.query.context,\n    },\n  };\n  const tag_operators = [\n    { value: 'is', label: 'is' },\n    { value: 'isnot', label: 'is not' },\n  ];\n  const onOperatorChange = (value: SelectableValue<string>) => {\n    update(props.query, `context.host_tags.host_tag_${index}_op`, () => value.value);\n    props.onChange(props.query);\n    props.onRunQuery();\n  };\n\n  return (\n    <>\n      <VerticalGroup spacing=\"sm\">\n        <HorizontalGroup>\n          <Label>Host tag {index + 1}: </Label>\n          <AsyncAutocomplete\n            autocompleter={vsAutocomplete(props.datasource, groupVS)}\n            contextPath={`context.host_tags.host_tag_${index}_grp`}\n            {...props}\n          />\n          <Select\n            width={8}\n            options={tag_operators}\n            onChange={onOperatorChange}\n            value={get(props.query, `context.host_tags.host_tag_${index}_op`)}\n          />\n\n          <AsyncAutocomplete\n            autocompleter={vsAutocomplete(props.datasource, optionVS)}\n            contextPath={`context.host_tags.host_tag_${index}_val`}\n            {...props}\n          />\n        </HorizontalGroup>\n      </VerticalGroup>\n    </>\n  );\n};\n\nexport const HostTagsFilter = (props: EditorProps): JSX.Element => {\n  return (\n    <>\n      {Array.from({ length: 3 }).map((_, idx) => (\n        <HostTagsItemFilter key={idx} index={idx} {...props} />\n      ))}\n    </>\n  );\n};\n","import React from 'react';\nimport { Button, InlineField, InlineFieldRow, Select } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { EditorProps } from './types';\nimport {\n  HostFilter,\n  HostGroupFilter,\n  HostLabelsFilter,\n  HostRegExFilter,\n  ServiceFilter,\n  ServiceGroupFilter,\n  ServiceRegExFilter,\n  SiteFilter,\n  HostTagsFilter,\n} from './filters';\nimport { Presentation } from 'types';\n\nexport const SelectAggregation = (props: EditorProps): JSX.Element => {\n  const combined_presentations = [\n    { value: 'lines', label: 'Lines' },\n    // { value: 'stacked', label: 'Stacked' }, // no difference to line at request level\n    { value: 'sum', label: 'Sum' },\n    { value: 'average', label: 'Average' },\n    { value: 'min', label: 'Minimum' },\n    { value: 'max', label: 'Maximum' },\n  ];\n\n  const onPresentationChange = async ({ value }: SelectableValue<string>) => {\n    const { onChange, query, onRunQuery } = props;\n    onChange({ ...query, params: { ...query.params, presentation: value as Presentation } });\n    onRunQuery();\n  };\n\n  return (\n    <InlineField label=\"Aggregation\" labelWidth={14}>\n      <Select\n        width={32}\n        options={combined_presentations}\n        onChange={onPresentationChange}\n        value={props.query.params.presentation}\n        placeholder=\"Aggregation\"\n      />\n    </InlineField>\n  );\n};\n\nexport const FilterEditor = (props: EditorProps): JSX.Element => {\n  const context = props.query.context || {};\n  return (\n    <>\n      {Object.keys(context).map((filtername, index) => (\n        <SelectFilters key={`${index}/${filtername}`} {...props} filtername={filtername} />\n      ))}\n      <SelectFilters {...props} filtername={''} />\n    </>\n  );\n};\n\ninterface FilterEditorProps extends EditorProps {\n  filtername: string;\n}\n\nexport const SelectFilters = (props: FilterEditorProps): null | JSX.Element => {\n  const all_filters = [\n    { value: 'siteopt', label: 'Site', render: SiteFilter },\n    { value: 'host', label: 'Hostname', render: HostFilter },\n    { value: 'hostregex', label: 'Hostname regex', render: HostRegExFilter },\n    { value: 'service', label: 'Service', render: ServiceFilter },\n    { value: 'serviceregex', label: 'Service regex', render: ServiceRegExFilter },\n    { value: 'host_labels', label: 'Host Labels', render: HostLabelsFilter },\n    { value: 'opthostgroup', label: 'Host is in Group', render: HostGroupFilter },\n    { value: 'optservicegroup', label: 'Service is in Group', render: ServiceGroupFilter },\n    { value: 'host_tags', label: 'HostTags', render: HostTagsFilter },\n  ];\n  const context = props.query.context || {};\n  const available_filters = all_filters.filter(\n    ({ value }) => value === props.filtername || !Object.prototype.hasOwnProperty.call(context, value)\n  );\n  // Early return in case all filters are on\n  if (!available_filters.length) {\n    return null;\n  }\n\n  const action = () => {\n    const { onChange, query, filtername } = props;\n    if (query.context) {\n      delete query.context[filtername];\n    }\n    onChange(query);\n  };\n\n  const onFilterChange = ({ value }: SelectableValue<string | null>) => {\n    const { onChange, query, filtername } = props;\n    if (query.context) {\n      delete query.context[filtername];\n    }\n\n    if (value) {\n      onChange({ ...query, context: { ...query.context, [value]: {} } });\n    }\n  };\n\n  const activeFilter = all_filters.find(({ value }) => value === props.filtername);\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Filter\" labelWidth={8}>\n        <Select\n          width={32}\n          options={available_filters}\n          onChange={onFilterChange}\n          value={props.filtername || null}\n          placeholder=\"Filter\"\n        />\n      </InlineField>\n      {activeFilter && (\n        <>\n          <Button icon=\"minus\" variant=\"secondary\" onClick={action} />\n          <activeFilter.render {...props} />\n        </>\n      )}\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\nimport { QueryEditorProps } from '@grafana/data';\nimport { DataSource } from './DataSource';\nimport { defaultQuery, MyDataSourceOptions, MyQuery } from './types';\nimport { FilterEditor, SelectAggregation } from './components/combinedgraphs';\nimport { defaults, get } from 'lodash';\nimport { InlineFieldRow } from '@grafana/ui';\nimport { HostFilter, ServiceFilter, SiteFilter } from 'components/filters';\nimport { GraphSelect } from 'components/fields';\n//import { logError } from '@grafana/runtime';\n\ntype Props = QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>;\n\nexport const QueryEditor = (props: Props): JSX.Element => {\n  defaults(props.query, defaultQuery); // mutate into default query\n  const editionMode = get(props, 'datasource.instanceSettings.jsonData.edition', '');\n\n  return (\n    <div className=\"gf-form-group\">\n      {editionMode === 'RAW' && (\n        <InlineFieldRow>\n          <SiteFilter {...props} />\n          <HostFilter {...props} />\n          <ServiceFilter {...props} />\n          <GraphSelect edition={editionMode} {...props} />\n        </InlineFieldRow>\n      )}\n      {editionMode === 'CEE' && (\n        <>\n          <FilterEditor {...props} />\n          <SelectAggregation {...props} />\n          <GraphSelect edition={editionMode} {...props} />\n        </>\n      )}\n    </div>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { DataSource } from './DataSource';\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor';\nimport { MyQuery, MyDataSourceOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<DataSource, MyQuery, MyDataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__5__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","buildRequestBody","data","JSON","stringify","graphDefinitionRequest","editionMode","query","range","specification","graphSpecification","data_range","time_range","params","context","graph_name","graphMode","extractSingleInfos","graph_id","presentation","Error","combinedDesc","graph_template","combinedGraphSpecification","site","host_name","service_description","datasource","single_infos","defaultQuery","buildMetricDataFrame","response","result_code","result","start_time","step","curves","frame","MutableDataFrame","refId","fields","name","type","FieldType","concat","map","x","title","zip","rrddata","forEach","i","appendRow","DataSource","instanceSettings","options","from","unix","to","promises","targets","target","defaults","getGraphQuery","Promise","all","then","isEmpty","this","doRequest","action","host","error","message","split","jsonData","edition","status","cmkRequest","method","headers","url","URLSearchParams","toString","api_url","request","getBackendSrv","fetch","toPromise","cancelled","String","DataSourceApi","SecretFormField","LegacyForms","FormField","ConfigEditor","event","props","onOptionsChange","username","secureJsonData","secret","secureJsonFields","cmkEditions","label","onEditionChange","FieldSet","className","labelWidth","inputWidth","onChange","onUrlChange","tooltip","InlineField","Select","width","placeholder","onUsernameChange","isConfigured","onReset","onResetSecret","onSecretChange","PureComponent","update","path","func","copy","cloneDeep","_update","vsAutocomplete","autocompleteConfig","inputValue","restRequest","trim","choices","isDisabled","AsyncAutocomplete","autocompleter","onRunQuery","contextPath","contextKey","AsyncSelect","newQuery","loadOptions","defaultOptions","GraphType","GraphSelect","completionVS","ident","mode","strict","str","toUpperCase","slice","toLowerCase","filter","startsWith","SiteFilter","sitesVS","HostFilter","hostVS","HostRegExFilter","hostRegEx","InlineFieldRow","Input","host_regex","Checkbox","checked","ServiceFilter","serviceVS","ServiceRegExFilter","serviceRegEx","HostLabelsFilter","valueListToSelect","labels","hostLabelFilter","parse","AsyncMultiSelect","search","world","search_label","includes","values","l","HostGroupFilter","groupVS","group_type","ServiceGroupFilter","service","HostTagsItemFilter","index","optionVS","group_id","VerticalGroup","spacing","HorizontalGroup","Label","HostTagsFilter","Array","length","_","idx","SelectAggregation","onPresentationChange","FilterEditor","keys","filtername","SelectFilters","all_filters","render","available_filters","activeFilter","find","Button","icon","variant","onClick","plugin","DataSourcePlugin","setConfigEditor","setQueryEditor"],"sourceRoot":""}